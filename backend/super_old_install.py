#!/usr/bin/env python3
"""
–°–£–ü–ï–† –°–¢–ê–†–´–ï –í–ï–†–°–ò–ò –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç —Å Python 3.13
"""

import subprocess
import sys

def run_pip(cmd):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç pip –∫–æ–º–∞–Ω–¥—É"""
    print(f"üîß {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ö†Ô∏è {result.stderr[:100]}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå {e}")
        return False

def install_ancient_versions():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥—Ä–µ–≤–Ω–∏–µ, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏"""
    print("üè∫ –£–°–¢–ê–ù–û–í–ö–ê –î–†–ï–í–ù–ò–• –°–¢–ê–ë–ò–õ–¨–ù–´–• –í–ï–†–°–ò–ô")
    print("=" * 50)
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏–∏ 2022 –≥–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç")
    print()
    
    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    run_pip("pip uninstall fastapi uvicorn pydantic starlette pydantic-core typing-extensions -y")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤—Å–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏
    commands = [
        # Typing extensions —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        "pip install typing-extensions==4.3.0",
        
        # Pydantic v1 —Å–∞–º–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
        "pip install pydantic==1.9.2",
        
        # Starlette –¥—Ä–µ–≤–Ω—è—è –Ω–æ —Ä–∞–±–æ—á–∞—è
        "pip install starlette==0.20.4",
        
        # FastAPI —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è (mid 2022)
        "pip install fastapi==0.85.0",
        
        # Uvicorn —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è
        "pip install uvicorn==0.18.3",
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
        "pip install python-multipart==0.0.5",
        "pip install python-dotenv==0.21.0"
    ]
    
    success = 0
    for cmd in commands:
        if run_pip(cmd):
            success += 1
    
    print(f"\nüìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {success}/{len(commands)}")
    return success >= 5

def test_ancient_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥—Ä–µ–≤–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–†–ï–í–ù–ò–• –í–ï–†–°–ò–ô")
    print("=" * 40)
    
    try:
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º pydantic...")
        import pydantic
        print(f"‚úÖ Pydantic {pydantic.VERSION}")
        
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º starlette...")
        import starlette
        print(f"‚úÖ Starlette {starlette.__version__}")
        
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º fastapi...")
        import fastapi
        print(f"‚úÖ FastAPI {fastapi.__version__}")
        
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º uvicorn...")
        import uvicorn
        print(f"‚úÖ Uvicorn {uvicorn.__version__}")
        
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        from fastapi import FastAPI
        app = FastAPI()
        
        @app.get("/")
        def root():
            return {"status": "ancient but working"}
        
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def create_ancient_server():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –Ω–∞ –¥—Ä–µ–≤–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"""
    ancient_code = '''#!/usr/bin/env python3
"""
Legal Assistant API - –î—Ä–µ–≤–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
–°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Python 3.13
"""

import sys
print(f"üè∫ –ó–∞–ø—É—Å–∫ –Ω–∞ –¥—Ä–µ–≤–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö (Python {sys.version.split()[0]})")

try:
    from fastapi import FastAPI
    import uvicorn
    import time
    
    app = FastAPI(
        title="Legal Assistant API - Ancient Stable",
        description="–ó–∞–ø—É—â–µ–Ω–æ –Ω–∞ –¥—Ä–µ–≤–Ω–∏—Ö –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –ø–∞–∫–µ—Ç–æ–≤",
        version="1.0.0-ancient"
    )
    
    @app.get("/")
    def read_root():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        import pydantic
        import fastapi
        import uvicorn
        
        return {
            "message": "üè∫ Legal Assistant API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –¥—Ä–µ–≤–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö!",
            "status": "stable_ancient",
            "python": sys.version.split()[0],
            "versions": {
                "fastapi": fastapi.__version__,
                "pydantic": str(pydantic.VERSION),
                "uvicorn": uvicorn.__version__
            },
            "compatibility": "Python 3.13 + ancient packages",
            "note": "–≠—Ç–∏ –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ä—ã–µ, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ!",
            "timestamp": time.time()
        }
    
    @app.get("/health")
    def health():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        return {
            "status": "healthy",
            "mode": "ancient_stable",
            "uptime": "running",
            "compatibility": "‚úÖ Python 3.13"
        }
    
    @app.get("/api/demo")
    def demo():
        """–î–µ–º–æ API"""
        return {
            "message": "API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–∞ –¥—Ä–µ–≤–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö",
            "features": [
                "‚úÖ FastAPI 0.85.0 (2022)",
                "‚úÖ Pydantic 1.9.2 (2022)", 
                "‚úÖ Uvicorn 0.18.3 (2022)",
                "‚úÖ Python 3.13 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                "üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            ],
            "next_steps": [
                "–í–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ä—ã–µ, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ",
                "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ - –ø–æ–∑–∂–µ"
            ]
        }
    
    if __name__ == "__main__":
        print("=" * 70)
        print("üèõÔ∏è  Legal Assistant API - Ancient Stable Edition")
        print("=" * 70)
        print("üè∫ –í–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤: FastAPI 0.85, Pydantic 1.9, Uvicorn 0.18")
        print("üêç Python:", sys.version.split()[0])
        print("üåê –°–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("üéØ –î–µ–º–æ: http://localhost:8000/api/demo")
        print("=" * 70)
        
        uvicorn.run(
            app,
            host="127.0.0.1",
            port=8000,
            log_level="info"
        )

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python super_old_install.py")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()
'''
    
    try:
        with open("ancient_server.py", "w", encoding="utf-8") as f:
            f.write(ancient_code)
        print("‚úÖ –°–æ–∑–¥–∞–Ω ancient_server.py")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def main():
    print("üè∫ –£–°–¢–ê–ù–û–í–ö–ê –î–†–ï–í–ù–ò–• –°–¢–ê–ë–ò–õ–¨–ù–´–• –í–ï–†–°–ò–ô")
    print("=" * 60)
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏–∏ 2022 –≥–æ–¥–∞ - –æ–Ω–∏ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç!")
    print()
    
    if install_ancient_versions():
        print("‚úÖ –î—Ä–µ–≤–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        if test_ancient_imports():
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ!")
            
            if create_ancient_server():
                print("\nüéâ –í–°–ï –ì–û–¢–û–í–û!")
                print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python ancient_server.py")
                print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000")
                print()
                print("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ä—ã–µ, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ!")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä")
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ")
    else:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω Python 3.11 –∏–ª–∏ 3.10")

if __name__ == "__main__":
    main()
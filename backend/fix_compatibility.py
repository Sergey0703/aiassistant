#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Python 3.13 + Pydantic
"""

import subprocess
import sys

def run_command(cmd):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É pip"""
    try:
        print(f"üîß {cmd}")
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {e}")
        return False

def main():
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ Python 3.13")
    print("=" * 50)
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π
    print("\nüì¶ –í–∞—Ä–∏–∞–Ω—Ç 1: –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏...")
    
    commands_v1 = [
        "pip uninstall fastapi uvicorn pydantic starlette -y",
        "pip install pydantic==2.5.0 --force-reinstall",
        "pip install fastapi==0.104.1 --force-reinstall", 
        "pip install uvicorn==0.24.0 --force-reinstall"
    ]
    
    success_v1 = True
    for cmd in commands_v1:
        if not run_command(cmd):
            success_v1 = False
    
    if success_v1:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –í–∞—Ä–∏–∞–Ω—Ç 1...")
        if test_imports():
            create_working_server()
            return
    
    print("\n‚ùå –í–∞—Ä–∏–∞–Ω—Ç 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: Downgrade –∫ —Å—Ç–∞—Ä—ã–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º –≤–µ—Ä—Å–∏—è–º
    print("\nüì¶ –í–∞—Ä–∏–∞–Ω—Ç 2: –°—Ç–∞—Ä—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏...")
    
    commands_v2 = [
        "pip uninstall fastapi uvicorn pydantic starlette -y",
        "pip install typing-extensions==4.7.1",
        "pip install pydantic==1.10.12",
        "pip install starlette==0.27.0", 
        "pip install fastapi==0.100.1",
        "pip install uvicorn==0.22.0"
    ]
    
    success_v2 = True
    for cmd in commands_v2:
        if not run_command(cmd):
            success_v2 = False
    
    if success_v2:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –í–∞—Ä–∏–∞–Ω—Ç 2...")
        if test_imports():
            create_working_server()
            return
    
    print("\n‚ùå –í–∞—Ä–∏–∞–Ω—Ç 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä
    print("\nüì¶ –í–∞—Ä–∏–∞–Ω—Ç 3: –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º...")
    
    commands_v3 = [
        "pip uninstall fastapi uvicorn pydantic starlette -y",
        "pip install pydantic==1.9.2",
        "pip install starlette==0.20.4",
        "pip install fastapi==0.85.0", 
        "pip install uvicorn==0.18.3"
    ]
    
    for cmd in commands_v3:
        run_command(cmd)
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –í–∞—Ä–∏–∞–Ω—Ç 3...")
    if test_imports():
        create_working_server()
    else:
        print("\nüí• –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏!")
        print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ Python 3.11 –∏–ª–∏ 3.10")

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã"""
    try:
        print("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        exec("import pydantic; print(f'‚úÖ Pydantic {pydantic.VERSION}')")
        exec("import starlette; print(f'‚úÖ Starlette {starlette.__version__}')")
        exec("import fastapi; print(f'‚úÖ FastAPI {fastapi.__version__}')")
        exec("import uvicorn; print(f'‚úÖ Uvicorn {uvicorn.__version__}')")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        exec("from fastapi import FastAPI; app = FastAPI(); print('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ')")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def create_working_server():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä"""
    print("\nüìù –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä...")
    
    server_code = '''#!/usr/bin/env python3
"""
Legal Assistant API - –†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è
"""

try:
    from fastapi import FastAPI
    from fastapi.responses import JSONResponse
    import uvicorn
    import time
    import sys
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    app = FastAPI(
        title="Legal Assistant API",
        description="AI Legal Assistant - Working Version",
        version="1.0.0",
        docs_url="/docs",
        redoc_url="/redoc"
    )
    
    @app.get("/")
    async def root():
        return {
            "message": "üéâ Legal Assistant API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            "status": "working",
            "version": "1.0.0",
            "python_version": sys.version,
            "timestamp": time.time()
        }
    
    @app.get("/health")
    async def health():
        try:
            import pydantic
            import fastapi
            import uvicorn
            
            return {
                "status": "healthy",
                "components": {
                    "python": sys.version.split()[0],
                    "fastapi": fastapi.__version__,
                    "pydantic": str(pydantic.VERSION),
                    "uvicorn": uvicorn.__version__
                },
                "timestamp": time.time()
            }
        except Exception as e:
            return {"status": "degraded", "error": str(e)}
    
    @app.get("/api/test")
    async def api_test():
        return {
            "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "endpoints": [
                "GET / - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                "GET /health - —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è", 
                "GET /docs - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Swagger",
                "GET /redoc - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è ReDoc"
            ]
        }
    
    if __name__ == "__main__":
        print("=" * 60)
        print("üèõÔ∏è  Legal Assistant API")
        print("=" * 60)
        print("üåê –°–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("üìñ ReDoc: http://localhost:8000/redoc")
        print("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: http://localhost:8000/health")
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
        print("=" * 60)
        
        uvicorn.run(
            app,
            host="127.0.0.1",
            port=8000,
            log_level="info",
            access_log=True
        )

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã: python fix_compatibility.py")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
'''
    
    try:
        with open("working_server.py", "w", encoding="utf-8") as f:
            f.write(server_code)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω working_server.py")
        print("\nüéâ –ì–û–¢–û–í–û!")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python working_server.py")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000")
        
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: {e}")

if __name__ == "__main__":
    main()
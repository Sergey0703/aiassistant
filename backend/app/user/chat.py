# ====================================
# –§–ê–ô–õ: backend/api/user/chat.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö endpoints —á–∞—Ç–∞
# ====================================

"""
User Chat Endpoints - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ endpoints –¥–ª—è —á–∞—Ç–∞
"""

from fastapi import APIRouter, HTTPException, Depends
from typing import List, Dict, Any
import logging
import time

from models.requests import ChatMessage, ChatHistoryRequest
from models.responses import ChatResponse, ChatHistoryResponse, ChatHistoryItem
from app.dependencies import get_document_service, get_services_status

router = APIRouter()
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
chat_history: List[Dict[str, Any]] = []

@router.post("/chat", response_model=ChatResponse)
async def chat_with_assistant(
    message: ChatMessage,
    document_service = Depends(get_document_service)
):
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""
    try:
        search_results = []
        sources = []
        
        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        try:
            search_results = await document_service.search(
                query=message.message,
                limit=3
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            sources = [result.get('filename', 'Unknown') for result in search_results]
            
        except Exception as e:
            logger.error(f"Search error: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if search_results and len(search_results) > 0:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            context_snippets = []
            for result in search_results:
                content = result.get('content', '')
                snippet = content[:300] + "..." if len(content) > 300 else content
                filename = result.get('filename', 'Unknown')
                context_snippets.append(f"üìÑ {filename}: {snippet}")
            
            context = "\n\n".join(context_snippets)
            
            if message.language == "uk":
                response_text = f"""–ù–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å:

ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å: –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: "{message.message}"

üìö –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

üí° –ü—Ä–∏–º—ñ—Ç–∫–∞: –£ –ø–æ–≤–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –∑ LLaMA —Ç—É—Ç –±—É–¥–µ –¥–µ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—å–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
            else:
                response_text = f"""Based on documents found in the knowledge base:

ü§ñ Answer: Found relevant documents for your question: "{message.message}"

üìö Relevant context:
{context}

üí° Note: In the full version with LLaMA, this will be a detailed answer based on this context."""
        else:
            # –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if message.language == "uk":
                response_text = f"""–î—è–∫—É—é –∑–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è: "{message.message}"

üîç –ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å.

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç
‚Ä¢ –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –ø–∞—Ä—Å–µ—Ä —Å–∞–π—Ç—ñ–≤ –¥–ª—è –∑–±–∞–≥–∞—á–µ–Ω–Ω—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å

üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ —é—Ä–∏–¥–∏—á–Ω–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏!"""
            else:
                response_text = f"""Thank you for your question: "{message.message}"

üîç Unfortunately, no relevant documents found in the knowledge base.

üí° Recommendations:
‚Ä¢ Try rephrasing your query
‚Ä¢ Add more documents through the admin panel
‚Ä¢ Use the website scraper to enrich the knowledge base

üìä The system is ready to help you with legal questions!"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_entry = {
            "message": message.message,
            "response": response_text,
            "language": message.language,
            "sources": sources,
            "timestamp": time.time()
        }
        chat_history.append(chat_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(chat_history) > 100:
            chat_history.pop(0)
        
        logger.info(f"Chat response generated for query: {message.message[:50]}...")
        
        return ChatResponse(
            response=response_text,
            sources=sources if sources else None
        )
        
    except Exception as e:
        logger.error(f"Chat error: {e}")
        raise HTTPException(status_code=500, detail=f"Chat service error: {str(e)}")

@router.get("/chat/history", response_model=ChatHistoryResponse)
async def get_chat_history(request: ChatHistoryRequest = ChatHistoryRequest()):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
        recent_history = chat_history[-request.limit:] if chat_history else []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted_history = []
        for entry in recent_history:
            formatted_entry = ChatHistoryItem(
                message=entry["message"],
                response=entry["response"],
                language=entry["language"],
                sources=entry.get("sources"),
                timestamp=entry.get("timestamp")
            )
            formatted_history.append(formatted_entry)
        
        return ChatHistoryResponse(
            history=formatted_history,
            total_messages=len(chat_history)
        )
        
    except Exception as e:
        logger.error(f"Chat history error: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get chat history: {str(e)}")

@router.delete("/chat/history")
async def clear_chat_history():
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤"""
    try:
        global chat_history
        old_count = len(chat_history)
        chat_history.clear()
        
        logger.info(f"Chat history cleared: {old_count} messages removed")
        
        return {
            "message": f"Cleared {old_count} chat messages",
            "remaining": len(chat_history)
        }
        
    except Exception as e:
        logger.error(f"Clear history error: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to clear chat history: {str(e)}")

@router.get("/chat/stats")
async def get_chat_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤"""
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫–∏
        languages = {}
        sources_used = 0
        
        for entry in chat_history:
            lang = entry.get("language", "unknown")
            languages[lang] = languages.get(lang, 0) + 1
            
            if entry.get("sources"):
                sources_used += 1
        
        return {
            "total_messages": len(chat_history),
            "languages": languages,
            "messages_with_sources": sources_used,
            "average_sources_per_message": sources_used / len(chat_history) if chat_history else 0
        }
        
    except Exception as e:
        logger.error(f"Chat stats error: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get chat stats: {str(e)}")
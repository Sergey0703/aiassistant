# ====================================
# –§–ê–ô–õ: backend/app/dependencies.py (–ù–û–í–´–ô –§–ê–ô–õ)
# –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
# ====================================

"""
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import logging
import sys
import os
from typing import Optional

from app.config import settings

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
document_service: Optional[object] = None
scraper: Optional[object] = None
SERVICES_AVAILABLE: bool = False
CHROMADB_ENABLED: bool = False

async def init_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global document_service, scraper, SERVICES_AVAILABLE, CHROMADB_ENABLED
    
    logger.info("üîß Initializing services...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ Python path
    current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    if current_dir not in sys.path:
        sys.path.append(current_dir)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    try:
        if settings.USE_CHROMADB:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ChromaDB
            try:
                from services.chroma_service import DocumentService
                document_service = DocumentService(settings.CHROMADB_PATH)
                CHROMADB_ENABLED = True
                logger.info("‚úÖ ChromaDB service initialized")
            except ImportError as e:
                logger.warning(f"ChromaDB not available, falling back to SimpleVectorDB: {e}")
                from services.document_processor import DocumentService
                document_service = DocumentService(settings.SIMPLE_DB_PATH)
                CHROMADB_ENABLED = False
                logger.info("‚úÖ SimpleVectorDB service initialized")
        else:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º SimpleVectorDB
            from services.document_processor import DocumentService
            document_service = DocumentService(settings.SIMPLE_DB_PATH)
            CHROMADB_ENABLED = False
            logger.info("‚úÖ SimpleVectorDB service initialized (forced)")
            
        SERVICES_AVAILABLE = True
        
    except Exception as e:
        logger.error(f"‚ùå Error initializing document service: {e}")
        document_service = None
        SERVICES_AVAILABLE = False
        CHROMADB_ENABLED = False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    try:
        from services.scraper_service import LegalSiteScraper
        scraper = LegalSiteScraper()
        logger.info("‚úÖ Web scraper service initialized")
    except Exception as e:
        logger.error(f"‚ùå Error initializing scraper service: {e}")
        scraper = None
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    logger.info(f"üìä Services status:")
    logger.info(f"   Document service: {'‚úÖ' if document_service else '‚ùå'}")
    logger.info(f"   ChromaDB enabled: {'‚úÖ' if CHROMADB_ENABLED else '‚ùå'}")
    logger.info(f"   Scraper service: {'‚úÖ' if scraper else '‚ùå'}")
    logger.info(f"   Overall available: {'‚úÖ' if SERVICES_AVAILABLE else '‚ùå'}")

def get_document_service():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    if not document_service:
        raise RuntimeError("Document service not available")
    return document_service

def get_scraper_service():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    if not scraper:
        raise RuntimeError("Scraper service not available")
    return scraper

def get_services_status():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    return {
        "document_service_available": document_service is not None,
        "scraper_available": scraper is not None,
        "chromadb_enabled": CHROMADB_ENABLED,
        "services_available": SERVICES_AVAILABLE
    }
# ====================================
# –§–ê–ô–õ: backend/api/user/chat.py (–ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é
# ====================================

"""
User Chat Endpoints - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ endpoints –¥–ª—è —á–∞—Ç–∞
"""

from fastapi import APIRouter, HTTPException, Depends
from typing import List, Dict, Any
import logging
import time

from models.requests import ChatMessage, ChatHistoryRequest
from models.responses import ChatResponse, ChatHistoryResponse, ChatHistoryItem
from app.dependencies import get_document_service

router = APIRouter()
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
chat_history: List[Dict[str, Any]] = []

@router.post("/chat", response_model=ChatResponse)
async def chat_with_assistant(
    message: ChatMessage,
    document_service = Depends(get_document_service)
):
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""
    try:
        search_results = []
        sources = []
        
        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        try:
            search_results = await document_service.search(
                query=message.message,
                limit=3,
                min_relevance=0.3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ 30%
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            sources = [result.get('filename', 'Unknown') for result in search_results]
            
        except Exception as e:
            logger.error(f"Search error: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if search_results and len(search_results) > 0:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            context_snippets = []
            for result in search_results:
                content = result.get('content', '')
                snippet = content[:300] + "..." if len(content) > 300 else content
                filename = result.get('filename', 'Unknown')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                match_type = result.get('search_info', {}).get('match_type', 'unknown')
                relevance = result.get('relevance_score', 0.0)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if match_type == "exact":
                    if message.language == "uk":
                        match_description = "üìç –¢–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è"
                    else:
                        match_description = "üìç Exact match"
                elif match_type == "semantic":
                    if message.language == "uk":
                        match_description = "üîç –°–µ–º–∞–Ω—Ç–∏—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è"
                    else:
                        match_description = "üîç Semantic match"
                else:
                    if message.language == "uk":
                        match_description = f"üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—Å—Ç—å: {relevance:.1%}"
                    else:
                        match_description = f"üìä Relevance: {relevance:.1%}"
                
                context_snippets.append(f"üìÑ {filename} ({match_description}): {snippet}")
            
            context = "\n\n".join(context_snippets)
            
            if message.language == "uk":
                response_text = f"""–ù–∞ –æ—Å–Ω–æ–≤—ñ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å:

ü§ñ –í—ñ–¥–ø–æ–≤—ñ–¥—å: –ó–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: "{message.message}"

üìö –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

üí° –ü—Ä–∏–º—ñ—Ç–∫–∞: –£ –ø–æ–≤–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó –∑ LLaMA —Ç—É—Ç –±—É–¥–µ –¥–µ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—å–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
            else:
                response_text = f"""Based on documents found in the knowledge base:

ü§ñ Answer: Found {len(search_results)} relevant documents for your question: "{message.message}"

üìö Relevant context:
{context}

üí° Note: In the full version with LLaMA, this will be a detailed answer based on this context."""
        else:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                stats = await document_service.get_stats()
                total_docs = stats.get('total_documents', '–Ω–µ–≤—ñ–¥–æ–º–æ' if message.language == "uk" else 'unknown')
            except:
                total_docs = '–Ω–µ–≤—ñ–¥–æ–º–æ' if message.language == "uk" else 'unknown'
            
            if message.language == "uk":
                response_text = f"""üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: "{message.message}"

‚ùå –ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å.

ü§î –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
‚Ä¢ –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–µ –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ—Ä–º—ñ–Ω–∏, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Å–∏–Ω–æ–Ω—ñ–º–∏ –∞–±–æ —ñ–Ω—à–∞ —Ç–µ—Ä–º—ñ–Ω–æ–ª–æ–≥—ñ—è
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∏ –∑ —Ç–∞–∫–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—É

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:
‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –±—ñ–ª—å—à –∑–∞–≥–∞–ª—å–Ω–∏–º–∏ —Ç–µ—Ä–º—ñ–Ω–∞–º–∏
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑–∞–º—ñ—Å—Ç—å —Ü—ñ–ª–∏—Ö —Ä–µ—á–µ–Ω—å
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è
‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—à—É–∫ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é, —è–∫—â–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∞–Ω–≥–ª–æ–º–æ–≤–Ω—ñ

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –∑–Ω–∞–Ω—å:
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {total_docs}
‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—ñ: 30%

üîß –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
‚Ä¢ –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –ø–∞—Ä—Å–µ—Ä —Å–∞–π—Ç—ñ–≤ –¥–ª—è –∑–±–∞–≥–∞—á–µ–Ω–Ω—è –±–∞–∑–∏ –∑–Ω–∞–Ω—å
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤"""
            else:
                response_text = f"""üîç Search results for query: "{message.message}"

‚ùå Unfortunately, no relevant documents found in the knowledge base.

ü§î Possible reasons:
‚Ä¢ The query is too specific or contains terms not present in documents
‚Ä¢ Using synonyms or different terminology than in documents
‚Ä¢ Relevant documents haven't been uploaded to the system yet

üí° Recommendations to improve results:
‚Ä¢ Try rephrasing the query with more general terms
‚Ä¢ Use keywords instead of full sentences
‚Ä¢ Check spelling and try alternative word forms
‚Ä¢ Try searching in Ukrainian if documents are in Ukrainian

üìä Knowledge base statistics:
‚Ä¢ Available documents: {total_docs}
‚Ä¢ Minimum relevance threshold: 30%

üîß For administrator:
‚Ä¢ Add more documents through the admin panel
‚Ä¢ Use the website scraper to enrich the knowledge base
‚Ä¢ Check document category settings"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_entry = {
            "message": message.message,
            "response": response_text,
            "language": message.language,
            "sources": sources,
            "timestamp": time.time(),
            "search_stats": {
                "found_documents": len(search_results),
                "has_relevant_results": len(search_results) > 0,
                "search_query": message.message
            }
        }
        chat_history.append(chat_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(chat_history) > 100:
            chat_history.pop(0)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        if search_results:
            logger.info(f"Chat response generated for query: '{message.message[:50]}...', found {len(search_results)} relevant results")
        else:
            logger.info(f"Chat response generated for query: '{message.message[:50]}...', no relevant results found")
        
        return ChatResponse(
            response=response_text,
            sources=sources if sources else None
        )
        
    except Exception as e:
        logger.error(f"Chat error: {e}")
        raise HTTPException(status_code=500, detail=f"Chat service error: {str(e)}")

@router.get("/chat/history", response_model=ChatHistoryResponse)
async def get_chat_history(request: ChatHistoryRequest = ChatHistoryRequest()):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
        recent_history = chat_history[-request.limit:] if chat_history else []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        formatted_history = []
        for entry in recent_history:
            formatted_entry = ChatHistoryItem(
                message=entry["message"],
                response=entry["response"],
                language=entry["language"],
                sources=entry.get("sources"),
                timestamp=entry.get("timestamp")
            )
            formatted_history.append(formatted_entry)
        
        return ChatHistoryResponse(
            history=formatted_history,
            total_messages=len(chat_history)
        )
        
    except Exception as e:
        logger.error(f"Chat history error: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get chat history: {str(e)}")

@router.delete("/chat/history")
async def clear_chat_history():
    """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤"""
    try:
        global chat_history
        old_count = len(chat_history)
        chat_history.clear()
        
        logger.info(f"Chat history cleared: {old_count} messages removed")
        
        return {
            "message": f"Cleared {old_count} chat messages",
            "remaining": len(chat_history)
        }
        
    except Exception as e:
        logger.error(f"Clear history error: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to clear chat history: {str(e)}")

@router.get("/chat/stats")
async def get_chat_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–æ–≤"""
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫–∏
        languages = {}
        sources_used = 0
        successful_searches = 0
        total_search_results = 0
        
        for entry in chat_history:
            lang = entry.get("language", "unknown")
            languages[lang] = languages.get(lang, 0) + 1
            
            if entry.get("sources"):
                sources_used += 1
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
            search_stats = entry.get("search_stats", {})
            if search_stats.get("has_relevant_results", False):
                successful_searches += 1
                total_search_results += search_stats.get("found_documents", 0)
        
        return {
            "total_messages": len(chat_history),
            "languages": languages,
            "messages_with_sources": sources_used,
            "successful_searches": successful_searches,
            "success_rate": (successful_searches / len(chat_history) * 100) if chat_history else 0,
            "average_sources_per_message": sources_used / len(chat_history) if chat_history else 0,
            "average_results_per_successful_search": total_search_results / successful_searches if successful_searches > 0 else 0
        }
        
    except Exception as e:
        logger.error(f"Chat stats error: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get chat stats: {str(e)}")

@router.get("/chat/search-test")
async def test_search_functionality(
    query: str = "test",
    min_relevance: float = 0.3,
    document_service = Depends(get_document_service)
):
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞"""
    try:
        logger.info(f"Testing search with query: '{query}', min_relevance: {min_relevance}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await document_service.search(
            query=query,
            limit=5,
            min_relevance=min_relevance
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã
        try:
            stats = await document_service.get_stats()
        except:
            stats = {"error": "Could not get stats"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        test_result = {
            "query": query,
            "min_relevance_threshold": min_relevance,
            "found_results": len(results),
            "database_stats": stats,
            "results_details": []
        }
        
        for result in results:
            result_detail = {
                "filename": result.get('filename', 'Unknown'),
                "relevance_score": result.get('relevance_score', 0.0),
                "match_type": result.get('search_info', {}).get('match_type', 'unknown'),
                "confidence": result.get('search_info', {}).get('confidence', 'unknown'),
                "content_preview": result.get('content', '')[:100] + "..." if result.get('content') else "No content"
            }
            test_result["results_details"].append(result_detail)
        
        return {
            "test_successful": True,
            "message": f"Search test completed for query '{query}'",
            "test_result": test_result
        }
        
    except Exception as e:
        logger.error(f"Search test error: {e}")
        return {
            "test_successful": False,
            "message": f"Search test failed for query '{query}'",
            "error": str(e)
        }
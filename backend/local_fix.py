#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Python 3.13 + Pydantic
"""

import sys
import subprocess

def patch_forwardref():
    """–ü–∞—Ç—á–∏—Ç ForwardRef –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å
        import typing
        from typing import ForwardRef
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        original_evaluate = ForwardRef._evaluate
        
        def patched_evaluate(self, globalns=None, localns=None, recursive_guard=None):
            """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è _evaluate —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π recursive_guard"""
            if recursive_guard is None:
                recursive_guard = frozenset()
            return original_evaluate(self, globalns, localns, recursive_guard)
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
        ForwardRef._evaluate = patched_evaluate
        print("‚úÖ ForwardRef._evaluate() –ø—Ä–æ–ø–∞—Ç—á–µ–Ω –¥–ª—è Python 3.13")
        return True
        
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å ForwardRef: {e}")
        return False

def install_compatible_versions():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤"""
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º typing-extensions —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Python 3.13
    commands = [
        "pip install typing-extensions==4.8.0 --force-reinstall",
        "pip install pydantic==2.4.2 --force-reinstall --no-deps",
        "pip install annotated-types pydantic-core --force-reinstall",
        "pip install fastapi==0.103.2 --force-reinstall --no-deps", 
        "pip install starlette==0.27.0 --force-reinstall",
        "pip install uvicorn==0.23.2 --force-reinstall --no-deps"
    ]
    
    for cmd in commands:
        try:
            print(f"üì¶ {cmd}")
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {result.stderr}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def create_compatibility_wrapper():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    wrapper_code = '''#!/usr/bin/env python3
"""
–û–±–µ—Ä—Ç–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è Python 3.13
"""

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ForwardRef –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
import sys
from typing import ForwardRef

# –ü—Ä–æ–ø–∞—Ç—á–∏–≤–∞–µ–º ForwardRef._evaluate –¥–ª—è Python 3.13
original_evaluate = ForwardRef._evaluate

def patched_evaluate(self, globalns=None, localns=None, recursive_guard=None):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è _evaluate"""
    if recursive_guard is None:
        recursive_guard = frozenset()
    return original_evaluate(self, globalns, localns, recursive_guard)

ForwardRef._evaluate = patched_evaluate

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å FastAPI
try:
    from fastapi import FastAPI
    from fastapi.responses import JSONResponse
    import uvicorn
    import time
    
    print("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω, FastAPI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = FastAPI(
        title="Legal Assistant API - Python 3.13 Compatible",
        description="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Python 3.13",
        version="1.0.0-py313-fix"
    )
    
    @app.get("/")
    async def root():
        return {
            "message": "üéâ Legal Assistant API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Python 3.13!",
            "status": "working",
            "python_version": sys.version,
            "fix_applied": "ForwardRef._evaluate patched",
            "timestamp": time.time()
        }
    
    @app.get("/health")
    async def health():
        import pydantic
        import fastapi
        
        return {
            "status": "healthy",
            "python_version": sys.version.split()[0],
            "packages": {
                "fastapi": fastapi.__version__,
                "pydantic": str(pydantic.VERSION),
                "uvicorn": uvicorn.__version__
            },
            "fix_status": "ForwardRef compatibility patch active"
        }
    
    @app.get("/api/test")
    async def api_test():
        return {
            "message": "API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ",
            "features": [
                "‚úÖ Python 3.13 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                "‚úÖ ForwardRef._evaluate –∏—Å–ø—Ä–∞–≤–ª–µ–Ω",
                "‚úÖ FastAPI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç",
                "‚úÖ Pydantic —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "‚úÖ JSON responses –∞–∫—Ç–∏–≤–Ω—ã"
            ]
        }
    
    if __name__ == "__main__":
        print("=" * 60)
        print("üêç Legal Assistant API - Python 3.13 Compatible")
        print("=" * 60)
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ç—á –¥–ª—è ForwardRef._evaluate()")
        print("üåê –°–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: http://localhost:8000/health")
        print("=" * 60)
        
        uvicorn.run(
            app,
            host="127.0.0.1", 
            port=8000,
            log_level="info"
        )

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–∞—Ç—á–∞: {e}")
    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install --force-reinstall fastapi pydantic uvicorn")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
'''
    
    try:
        with open("patched_server.py", "w", encoding="utf-8") as f:
            f.write(wrapper_code)
        print("‚úÖ –°–æ–∑–¥–∞–Ω patched_server.py —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏")
        return True
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: {e}")
        return False

def main():
    print("üîß –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Python 3.13")
    print("=" * 50)
    
    print("üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print("1. –ü–∞—Ç—á–∏–º ForwardRef._evaluate() –¥–ª—è Python 3.13")
    print("2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤")
    print("3. –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø–∞—Ç—á–µ–º")
    print()
    
    # –®–∞–≥ 1: –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–ø–∞—Ç—á–∏—Ç—å
    print("üõ†Ô∏è –®–∞–≥ 1: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á...")
    patch_success = patch_forwardref()
    
    # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏
    print("\nüõ†Ô∏è –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏...")
    install_compatible_versions()
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø–∞—Ç—á–µ–º
    print("\nüõ†Ô∏è –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø–∞—Ç—á–µ–º...")
    wrapper_success = create_compatibility_wrapper()
    
    if wrapper_success:
        print("\nüéâ –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python patched_server.py")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")

if __name__ == "__main__":
    main()